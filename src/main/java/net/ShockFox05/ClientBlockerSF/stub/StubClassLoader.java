package net.ShockFox05.ClientBlockerSF.stub;

import net.ShockFox05.ClientBlockerSF.ClientBlockerSF;
import org.slf4j.Logger;
import com.mojang.logging.LogUtils;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * Custom ClassLoader that provides stub implementations for client-only classes.
 */
public class StubClassLoader extends ClassLoader {
    private static final Logger LOGGER = LogUtils.getLogger();

    public StubClassLoader(ClassLoader parent) {
        super(parent);
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        // Check if we have a stub for this class and if the stub system is enabled
        if (StubClassTransformer.hasStubFor(name) && StubClassTransformerHook.isEnabled()) {
            byte[] bytecode = StubClassTransformer.getStubBytecode(name);
            if (bytecode != null) {
                // Log if enabled in config
                if (StubClassTransformerHook.shouldLogLoading()) {
                    LOGGER.info("[{}] Providing stub implementation for client class: {}", ClientBlockerSF.MOD_ID, name);
                }

                Class<?> stubClass = defineClass(name, bytecode, 0, bytecode.length);

                // Register this stub in the registry for tracking
                StubClassRegistry.registerLoadedStub(name, stubClass.getName());

                return stubClass;
            }
        }

        // If no stub is available, delegate to parent class loader
        return super.findClass(name);
    }

    /**
     * Generate bytecode for a stub class.
     *
     * @param className The name of the class to generate a stub for
     * @param stubClass The stub class to use as a template
     * @return The generated bytecode, or null if generation failed
     */
    public static byte[] generateStubClassBytes(String className, Class<?> stubClass) {
        try {
            // Get the bytecode of the stub class
            String stubClassName = stubClass.getName();
            String resourceName = stubClassName.replace('.', '/') + ".class";

            try (InputStream is = stubClass.getClassLoader().getResourceAsStream(resourceName)) {
                if (is == null) {
                    LOGGER.error("[{}] Could not find resource for stub class: {}", ClientBlockerSF.MOD_ID, stubClassName);
                    return null;
                }

                // Read the bytecode
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[4096];
                int bytesRead;
                while ((bytesRead = is.read(buffer)) != -1) {
                    baos.write(buffer, 0, bytesRead);
                }

                // For now, we just return the stub class bytecode as-is
                // In a more advanced implementation, we could modify the bytecode to match the target class
                return baos.toByteArray();
            }
        } catch (IOException e) {
            LOGGER.error("[{}] Failed to generate stub bytecode for {}", ClientBlockerSF.MOD_ID, className, e);
            return null;
        }
    }
}
